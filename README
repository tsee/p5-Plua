=pod

=head1 PLua

Interfacing between Perl and Lua as seamlessly and efficiently as
unreasonably possible!

=head1 Introduction

Lua (and specifically luajit) is really rather efficient. And it's a
safe language. A "scripting" language. And it's not too painful to
deal with from C. The motiviation is to allow Perl to use
tightly-coupled blocks of embedded Lua code to speed up hot code paths.

In other words, you can do this:

  use PLua;
  bla bla bla Perl code bla bla
  my $foo = 1;
  lua {
    local bar = $foo.int * 42
    $foo = some_lua_function(bar)
  }
  bla more Perl using modified $foo here

The details are (likely unsurprisingly) a bit involved.

Since this is an experiment and proof-of-principle quality code base
this README is initially (hopefully) going to be mostly a guide to
getting started with hacking on PLua itself.

=head1 Building

Make sure to have a copy of Lua (likely luajit) compiled and available
from a standard include/linking location. Possibly edit Makefile.PL to
point at the directory of the location if you use a custom one. Then,
it's just the usual:

  perl Makefile.PL
  make
  make test (some tests fail!)

You can enable debug mode with a number of assertions like this:

  DEBUG=1 perl Makefile.PL
  make
  make test

Since I dislike fuzzing with build systems and I am lazy (and the DEBUG=1
is a horrible hack), I usually work like this:

  hack hack hack
  make clean; DEBUG=1 perl Makefile.PL && make test
  rinse, repeat

Which is still fast enough with this code base. Patches welcome (really).

=head1 Understanding the Implementation

Who does?
